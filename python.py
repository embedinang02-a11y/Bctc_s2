# X·ª≠ l√Ω chu·ªói JSON tr·∫£ v·ªÅ
    json_str = response.text.strip().replace("```json", "").replace("```", "").strip()
    return pd.read_json(io.StringIO(json_str), typ='series')

# --- H√†m t√≠nh to√°n Ch·ªâ s·ªë T√†i ch√≠nh (Y√™u c·∫ßu 3) ---
def calculate_project_metrics(df_cashflow, initial_investment, wacc):
    """T√≠nh to√°n NPV, IRR, PP, DPP."""
    
    cash_flows = df_cashflow['D√≤ng ti·ªÅn thu·∫ßn (CF)'].values
    
    # 1. NPV
    # Th√™m v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu v√†o ƒë·∫ßu d√≤ng ti·ªÅn
    full_cash_flows = np.insert(cash_flows, 0, -initial_investment) 
    npv_value = np.npv(wacc, full_cash_flows)
    
    # 2. IRR
    try:
        irr_value = np.irr(full_cash_flows)
    except ValueError:
        irr_value = np.nan # Kh√¥ng th·ªÉ t√≠nh IRR

    # 3. PP (Payback Period - Th·ªùi gian ho√†n v·ªën)
    cumulative_cf = np.cumsum(full_cash_flows)
    pp_year = np.where(cumulative_cf >= 0)[0]
    if pp_year.size > 0:
        pp_year = pp_year[0] # NƒÉm m√† t√≠ch l≈©y CF >= 0
        if pp_year == 0: 
             pp = 0 
        else:
             # T√≠nh ph√¢n ƒëo·∫°n nƒÉm (nƒÉm tr∆∞·ªõc - cumulative_cf) / (cf nƒÉm ho√†n v·ªën)
             # V·ªën ch∆∞a ho√†n: abs(cumulative_cf[pp_year-1])
             # CF nƒÉm ho√†n v·ªën: cash_flows[pp_year-1]
             capital_remaining = abs(cumulative_cf[pp_year-1])
             cf_of_payback_year = cash_flows[pp_year-1]
             pp = pp_year - 1 + (capital_remaining / cf_of_payback_year) if cf_of_payback_year != 0 else pp_year 
    else:
        pp = 'Kh√¥ng ho√†n v·ªën'

    # 4. DPP (Discounted Payback Period - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    discount_factors = 1 / ((1 + wacc) ** np.arange(0, len(full_cash_flows)))
    discounted_cf = full_cash_flows * discount_factors
    cumulative_dcf = np.cumsum(discounted_cf)
    
    dpp_year = np.where(cumulative_dcf >= 0)[0]
    if dpp_year.size > 0:
        dpp_year = dpp_year[0]
        if dpp_year == 0:
             dpp = 0
        else:
             capital_remaining_d = abs(cumulative_dcf[dpp_year-1])
             dcf_of_payback_year = discounted_cf[dpp_year] # ƒê√¢y l√† DCF c·ªßa nƒÉm ƒë·∫ßu ti√™n m√† t√≠ch l≈©y >= 0
             dpp = dpp_year - 1 + (capital_remaining_d / dcf_of_payback_year) if dcf_of_payback_year != 0 else dpp_year
    else:
        dpp = 'Kh√¥ng ho√†n v·ªën'
        
    return npv_value, irr_value, pp, dpp

# --- H√†m g·ªçi AI ph√¢n t√≠ch ch·ªâ s·ªë (Y√™u c·∫ßu 4) ---
def get_ai_evaluation(metrics_data, wacc_rate, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë ƒë√°nh gi√° d·ª± √°n ƒë·∫øn Gemini API v√† nh·∫≠n ph√¢n t√≠ch."""
    
    if not api_key:
        return "L·ªói: Kh√≥a API kh√¥ng ƒë∆∞·ª£c cung c·∫•p."

    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'  

        prompt = f"""
B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ª± √°n ƒë·∫ßu t∆∞ c√≥ kinh nghi·ªám. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra nh·∫≠n x√©t ng·∫Øn g·ªçn, kh√°ch quan (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ kh·∫£ nƒÉng ch·∫•p nh·∫≠n v√† r·ªßi ro c·ªßa d·ª± √°n. 
        
        C√°c ch·ªâ s·ªë c·∫ßn ph√¢n t√≠ch:
        - NPV: {metrics_data['NPV']:.2f}
        - IRR: {metrics_data['IRR']:.2%}
        - WACC (T·ª∑ l·ªá chi·∫øt kh·∫•u): {wacc_rate:.2%}
        - PP (Th·ªùi gian ho√†n v·ªën): {metrics_data['PP']} nƒÉm
        - DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u): {metrics_data['DPP']} nƒÉm
        
        Ch√∫ √Ω:
        1. ƒê√°nh gi√° t√≠nh kh·∫£ thi (NPV > 0 v√† IRR > WACC).
        2. Nh·∫≠n x√©t v·ªÅ t·ªëc ƒë·ªô ho√†n v·ªën (PP v√† DPP).
        3. K·∫øt lu·∫≠n t·ªïng th·ªÉ v·ªÅ vi·ªác ch·∫•p nh·∫≠n hay t·ª´ ch·ªëi d·ª± √°n.
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- Giao di·ªán v√† Lu·ªìng ch√≠nh ---

# L·∫•y API Key
api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
     st.error("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")

uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh:",
    type=['docx']
)

# Kh·ªüi t·∫°o state ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t
if 'extracted_data' not in st.session_state:
    st.session_state['extracted_data'] = None

# --- Ch·ª©c nƒÉng 1: L·ªçc d·ªØ li·ªáu b·∫±ng AI ---
if uploaded_file is not None:
    doc_text = read_docx_file(uploaded_file)
    
    if st.button("Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh b·∫±ng AI ü§ñ"):
        if api_key:
            with st.spinner('ƒêang ƒë·ªçc v√† tr√≠ch xu·∫•t th√¥ng s·ªë t√†i ch√≠nh b·∫±ng Gemini...'):
                try:
                    st.session_state['extracted_data'] = extract_financial_data(doc_text, api_key)
                    st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")
                except APIError:
                    st.error("L·ªói API: Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c x√°c th·ª±c API Key.")
                except Exception as e:
                    st.error(f"L·ªói tr√≠ch xu·∫•t: {e}")
        else:
            st.error("Vui l√≤ng cung c·∫•p Kh√≥a API.")

# --- Hi·ªÉn th·ªã v√† T√≠nh to√°n (Y√™u c·∫ßu 2 & 3) ---
if st.session_state['extracted_data'] is not None:
    data = st.session_state['extracted_data']
    
    st.subheader("2. C√°c Th√¥ng s·ªë D·ª± √°n ƒë√£ Tr√≠ch xu·∫•t")
    
    # Hi·ªÉn th·ªã c√°c th√¥ng s·ªë quan tr·ªçng (Chuy·ªÉn ƒë·ªïi c√°c th√¥ng s·ªë v·ªÅ ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá/ph·∫ßn trƒÉm)
    col1, col2, col3 = st.columns(3)
col1.metric("V·ªën ƒê·∫ßu t∆∞ (C‚ÇÄ)", f"{data['V·ªën ƒë·∫ßu t∆∞']:,.0f} VNƒê")
    col2.metric("D√≤ng ƒë·ªùi d·ª± √°n (N)", f"{data['D√≤ng ƒë·ªùi d·ª± √°n']:.0f} nƒÉm")
    col3.metric("WACC (k)", f"{data['WACC']:.2%}")
    col1.metric("Doanh thu H√†ng nƒÉm (R)", f"{data['Doanh thu h√†ng nƒÉm']:,.0f} VNƒê")
    col2.metric("Chi ph√≠ Hƒê H√†ng nƒÉm (C)", f"{data['Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm']:,.0f} VNƒê")
    col3.metric("Thu·∫ø su·∫•t (t)", f"{data['Thu·∫ø su·∫•t']:.2%}")

    st.markdown("---")
    
    st.subheader("3. B·∫£ng D√≤ng ti·ªÅn (Cash Flow)")
    
    # Gi·∫£ ƒë·ªãnh: Kh·∫•u hao = V·ªën ƒë·∫ßu t∆∞ / D√≤ng ƒë·ªùi d·ª± √°n (ph∆∞∆°ng ph√°p ƒë∆∞·ªùng th·∫≥ng)
    # Gi·∫£ ƒë·ªãnh: Gi√° tr·ªã thanh l√Ω (Salvage Value) = 0
    initial_investment = data['V·ªën ƒë·∫ßu t∆∞']
    project_life = int(data['D√≤ng ƒë·ªùi d·ª± √°n'])
    annual_revenue = data['Doanh thu h√†ng nƒÉm']
    annual_cost = data['Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm']
    wacc = data['WACC']
    tax_rate = data['Thu·∫ø su·∫•t']
    
    try:
        depreciation = initial_investment / project_life if project_life > 0 else 0
    except ZeroDivisionError:
        st.error("D√≤ng ƒë·ªùi d·ª± √°n ph·∫£i l·ªõn h∆°n 0 ƒë·ªÉ t√≠nh kh·∫•u hao.")
        depreciation = 0

    # B·∫£ng d√≤ng ti·ªÅn
    years = np.arange(1, project_life + 1)
    
    EBT = annual_revenue - annual_cost - depreciation
    Tax = EBT * tax_rate if EBT > 0 else 0
    EAT = EBT - Tax
    # D√≤ng ti·ªÅn thu·∫ßn = L·ª£i nhu·∫≠n sau thu·∫ø + Kh·∫•u hao
    CF = EAT + depreciation
    
    cashflow_data = {
        'NƒÉm': years,
        'Doanh thu (R)': [annual_revenue] * project_life,
        'Chi ph√≠ Hƒê (C)': [annual_cost] * project_life,
        'Kh·∫•u hao (D)': [depreciation] * project_life,
        'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)': [EBT] * project_life,
        'Thu·∫ø (Tax)': [Tax] * project_life,
        'L·ª£i nhu·∫≠n sau thu·∫ø (EAT)': [EAT] * project_life,
        'D√≤ng ti·ªÅn thu·∫ßn (CF)': [CF] * project_life
    }
    
    df_cashflow = pd.DataFrame(cashflow_data)
    
    st.dataframe(
        df_cashflow.style.format({
            col: '{:,.0f}' for col in df_cashflow.columns if col not in ['NƒÉm']
        }), 
        use_container_width=True
    )

    st.markdown("---")
    
    st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
    
    try:
        npv, irr, pp, dpp = calculate_project_metrics(df_cashflow, initial_investment, wacc)
        
        metrics_data = {
            'NPV': npv,
            'IRR': irr,
            'PP': pp,
            'DPP': dpp
        }
        
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn)", f"{npv:,.0f} VNƒê", delta=("D·ª± √°n c√≥ l·ªùi" if npv > 0 else "D·ª± √°n l·ªó"))
        col2.metric("IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi t·∫°i)", f"{irr:.2%}" if not np.isnan(irr) else "N/A")
col3.metric("PP (Th·ªùi gian ho√†n v·ªën)", f"{pp:.2f} nƒÉm" if isinstance(pp, float) else pp)
        col4.metric("DPP (Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)", f"{dpp:.2f} nƒÉm" if isinstance(dpp, float) else dpp)

        # --- Ch·ª©c nƒÉng 5: Y√™u c·∫ßu AI Ph√¢n t√≠ch ---
        st.markdown("---")
        st.subheader("5. Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n (AI)")
        
        if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë üß†"):
            if api_key:
                with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                    ai_result = get_ai_evaluation(metrics_data, wacc, api_key)
                    st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                    st.info(ai_result)
            else:
                 st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh Secrets.")

    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra khi t√≠nh to√°n ch·ªâ s·ªë: {e}. Vui l√≤ng ki·ªÉm tra c√°c th√¥ng s·ªë ƒë·∫ßu v√†o.")

else:
    st.info("Vui l√≤ng t·∫£i l√™n file Word v√† nh·∫•n n√∫t 'Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh b·∫±ng AI' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
